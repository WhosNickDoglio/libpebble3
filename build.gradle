import org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig
buildscript {
    ext.kotlin_version = '1.6.20-RC'
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.6.10'
    id("maven-publish")
}

def klockVersion = "1.12.0"
def ktorVersion = "1.4.0"
def coroutinesVersion = "1.5.1-new-mm-dev2"

repositories {
    mavenCentral()
    google()
    jcenter()
    maven {
        url "https://maven.pkg.jetbrains.space/public/p/kotlinx-coroutines/maven"
    }
}

apply plugin: 'com.android.library'
//apply plugin: 'kotlin-android'

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pebble-dev/libpebblecommon")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

android { // android specific configuration
    compileSdkVersion 29 // SDK version to compile against
    defaultConfig {
        minSdkVersion 15 // min SDK version supported by this lib
        targetSdkVersion 29 // max SDK version supported by this lib
        versionCode 1
        versionName getVersion()
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner' // See notes #1
    }

    buildTypes { // the build variants for the lib
        getByName("release") {
            minifyEnabled false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"))
        }
        getByName("debug") {
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'// See notes #4
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
    def xcf = new XCFrameworkConfig(project)
    jvm {
        compilations.main.output // get the main compilation output
        compilations.test.runtimeDependencyFiles // get the test runtime classpath
    }

    iosX64("iosX64") { // Simulator
        binaries {
            framework {
                baseName = "libpebblecommon"
                xcf.add(it)
            }
        }
    }
    iosArm64("ios") {
        binaries {
            framework {
                baseName = "libpebblecommon"
                xcf.add(it)
            }
        }
    }

    iosArm32("iosArmv7") {
        binaries {
            framework {
                baseName = "libpebblecommon"
                xcf.add(it)
            }
        }
    }

    // use the android preset
    android {
        publishLibraryVariants("release", "debug")
        publishLibraryVariantsGroupedByFlavor = true
    }

    sourceSets {
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
                implementation "com.soywiz.korlibs.klock:klock-jvm:$klockVersion"
                implementation "com.benasher44:uuid-jvm:0.2.2"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('reflect')

                implementation "io.ktor:ktor-client-websockets:$ktorVersion"
                implementation "io.ktor:ktor-client-cio:$ktorVersion"
                implementation "io.ktor:ktor-client-okhttp:$ktorVersion"
            }
        }

        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "com.benasher44:uuid:0.2.2"
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation kotlin('reflect')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
                implementation "com.soywiz.korlibs.klock:klock-android:$klockVersion"
                implementation "com.benasher44:uuid-jvm:0.2.2"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('reflect')
            }
        }

        iosMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
            }
        }
    }
    sourceSets {
        all {
            languageSettings {
                optIn('kotlin.ExperimentalUnsignedTypes')
                optIn('kotlin.ExperimentalStdlibApi')
                optIn('kotlin.RequiresOptIn')
            }
        }
    }
}

project.afterEvaluate {
    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            !publication.name.contains("ios")
        }
    }
    tasks.withType(Jar) {
        onlyIf {
            !name.contains("ios")
        }
    }
}

/*task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}*/
