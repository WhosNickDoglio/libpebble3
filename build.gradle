import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlin_version = '1.8.10'
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlin_version"
    id("maven-publish")
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}

def klockVersion = "2.4.13"
def ktorVersion = "1.6.7"
def coroutinesVersion = "1.6.4"
def uuidVersion = "0.4.1"

repositories {
    mavenCentral()
    google()
    maven {
        url "https://maven.pkg.jetbrains.space/public/p/kotlinx-coroutines/maven"
    }
}

apply plugin: 'com.android.library'
//apply plugin: 'kotlin-android'

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pebble-dev/libpebblecommon")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

android { // android specific configuration
    compileSdkVersion 33 // SDK version to compile against
    defaultConfig {
        minSdkVersion 16 // min SDK version supported by this lib
        targetSdkVersion 33 // max SDK version supported by this lib
        versionCode 2
        versionName getVersion()
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner' // See notes #1
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    buildTypes { // the build variants for the lib
        getByName("release") {
            minifyEnabled false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"))
        }
        getByName("debug") {
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'// See notes #4
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
    jvm {
        compilations.main.output // get the main compilation output
        compilations.test.runtimeDependencyFiles // get the test runtime classpath
    }

    iosX64("iosX64") { // Simulator
        binaries {
            framework {
                baseName = "libpebblecommon"
            }
        }
    }
    iosArm64("ios") {
        binaries {
            framework {
                baseName = "libpebblecommon"
            }
        }
    }

    iosArm32("iosArmv7") {
        binaries {
            framework {
                baseName = "libpebblecommon"
            }
        }
    }

    iosSimulatorArm64("iosSimulatorArm64") {
        binaries {
            framework {
                baseName = "libpebblecommon"
            }
        }
    }

    // use the android preset
    android {
        publishLibraryVariants("release", "debug")
        publishLibraryVariantsGroupedByFlavor = true
    }

    sourceSets {
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
                implementation "com.soywiz.korlibs.klock:klock-jvm:$klockVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('reflect')

                implementation "io.ktor:ktor-client-websockets:$ktorVersion"
                implementation "io.ktor:ktor-client-cio:$ktorVersion"
                implementation "io.ktor:ktor-client-okhttp:$ktorVersion"
            }
        }

        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "com.benasher44:uuid:$uuidVersion"
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
                implementation 'co.touchlab:kermit:2.0.0-RC4'
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation kotlin('reflect')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
                implementation "com.soywiz.korlibs.klock:klock-android:$klockVersion"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('reflect')
            }
        }

        iosMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion") {
                    version {
                        strictly coroutinesVersion
                    }
                }
            }
        }
    }
    sourceSets {
        all {
            languageSettings {
                optIn('kotlin.ExperimentalUnsignedTypes')
                optIn('kotlin.ExperimentalStdlibApi')
                optIn('kotlin.RequiresOptIn')
            }
        }
    }
}

project.afterEvaluate {
    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            !publication.name.contains("ios")
        }
    }
    tasks.withType(Jar) {
        onlyIf {
            !name.contains("ios")
        }
    }
}

/*task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}*/

tasks.register("iosSimulatorFatFramework", PlatformFatFramework) {
    def iosX64Task = kotlin.targets.getByName("iosX64").binaries.getFramework("RELEASE")
    def iosSimulatorArm64Task = kotlin.targets.getByName("iosSimulatorArm64").binaries.getFramework("RELEASE")
    dependsOn iosX64Task.linkTask
    dependsOn iosSimulatorArm64Task.linkTask

    platform = "simulator"

    inputFrameworks.setFrom(project.files(iosX64Task.outputFile, iosSimulatorArm64Task.outputFile))
    inputFrameworkDSYMs.setFrom(project.files(iosX64Task.outputFile.path+".dSYM", iosX64Task.outputFile.path+".dSYM"))
}

tasks.register("iosDeviceFatFramework", PlatformFatFramework) {
    def iosTask = kotlin.targets.getByName("ios").binaries.getFramework("RELEASE")
    def iosArmv7Task = kotlin.targets.getByName("iosArmv7").binaries.getFramework("RELEASE")
    dependsOn iosTask.linkTask
    dependsOn iosArmv7Task.linkTask

    platform = "device"

    inputFrameworks.setFrom(project.files(iosTask.outputFile, iosArmv7Task.outputFile))
    inputFrameworkDSYMs.setFrom(project.files(iosTask.outputFile.path+".dSYM", iosArmv7Task.outputFile.path+".dSYM"))
}

tasks.register("assembleXCFramework") {
    def deviceTask = tasks.getByName("iosDeviceFatFramework")
    def simulatorTask = tasks.getByName("iosSimulatorFatFramework")
    dependsOn deviceTask
    dependsOn simulatorTask
    outputs.dir(layout.buildDirectory.dir("xcframework")).withPropertyName("outputDir")
    logger.log(LogLevel.ERROR, deviceTask.outputDir.dir("libpebblecommon.framework").get().asFile.path)
    logger.log(LogLevel.ERROR, simulatorTask.outputDir.dir("libpebblecommon.framework").get().asFile.path)

    String outputPath = layout.buildDirectory.dir("xcframework").get().asFile.path + "/libpebblecommon.xcframework"

    doLast {
        delete outputPath
        exec {
            commandLine (
                "xcodebuild", "-create-xcframework",
                "-framework", deviceTask.outputDir.dir("libpebblecommon.framework").get().asFile.path,
                "-debug-symbols", deviceTask.outputDir.dir("libpebblecommon.framework.dSYM").get().asFile.path,
                "-framework", simulatorTask.outputDir.dir("libpebblecommon.framework").get().asFile.path,
                "-debug-symbols", simulatorTask.outputDir.dir("libpebblecommon.framework.dSYM").get().asFile.path,
                "-output", outputPath
            )
        }
    }
}

public abstract class PlatformFatFramework extends DefaultTask {
    PlatformFatFramework() {
        onlyIf {
            Os.isFamily(Os.FAMILY_MAC)
        }
    }

    @Input
    abstract Property<String> getPlatform()

    @InputFiles
    final abstract ConfigurableFileCollection inputFrameworks = project.objects.fileCollection()

    @InputFiles
    final abstract ConfigurableFileCollection inputFrameworkDSYMs = project.objects.fileCollection()

    @OutputDirectory
    DirectoryProperty getOutputDir() {
        return project.objects.directoryProperty().convention(project.layout.buildDirectory.dir("platform-fat-framework/${platform.get()}"))
    }

    private void copyFramework() {
        File file = inputFrameworks.getFiles().toArray()[0]
        project.copy {
            from file
            into outputDir.get().asFile.toPath().resolve(file.name)
        }
    }

    private void copyFrameworkDSYM() {
        File file = inputFrameworkDSYMs.getFiles().toArray()[0]
        project.copy {
            from file
            into outputDir.get().asFile.toPath().resolve(file.name)
        }
    }

    private void lipoMergeFrameworks() {
        ArrayList<String> inputs = []
        inputFrameworks.forEach {
            inputs.add(it.toPath().resolve("libpebblecommon")).toString()
        }
        String out = outputDir.get().asFile.toPath()
                .resolve(inputFrameworks.getFiles().toArray()[0].name+"/libpebblecommon").toString()
        project.exec {
            commandLine ((["lipo", "-create"] + inputs) + ["-output", out])
        }
    }

    private void lipoMergeFrameworkDSYMs() {
        ArrayList<String> inputs = []
        inputFrameworkDSYMs.forEach {
            inputs.add(it.toPath().resolve("Contents/Resources/DWARF/libpebblecommon")).toString()
        }
        String out = outputDir.get().asFile.toPath()
                .resolve(inputFrameworkDSYMs.getFiles().toArray()[0].name+"/Contents/Resources/DWARF/libpebblecommon").toString()
        project.exec {
            commandLine ((["lipo", "-create"] + inputs) + ["-output", out])
        }
    }

    @TaskAction
    void createPlatformFatFramework() {
        copyFramework()
        copyFrameworkDSYM()
        lipoMergeFrameworks()
        lipoMergeFrameworkDSYMs()
    }
}
